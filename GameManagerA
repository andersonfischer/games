using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GameManager : MonoBehaviour 
{
	public static GameManager instance;

	public GameObject player;
	public List<GameObject> asteroids;
	public float score;
	public int lives;
	public GameObject[] Spawnpoint1;
	public float asteroidSpeed;
	public float enemyShipSpeed;
	public float enemyShipRotationSpeed;
	public List<GameObject> activeEnemies;
	public bool removingEnemies;
	public int maxActiveEnemies;
	void Awake () 
	{
		if (instance != null) 
		{
			Destroy (this.gameObject);
		} 
		else 
		{
			instance = this;
		}
	}

	void start()
	{
		activeEnemies = new List<GameObject> ();
		removingEnemies = false;

	}
		// Update is called once per frame
	void Update ()
	{
		if (Input.GetKey (KeyCode.Escape)) 
		{
			Application.Quit ();
		}
		if (Input.GetKeyDown (KeyCode.R)) 
		{
			if (activeEnemies.Count < maxActiveEnemies) 
			{
				
				int id = Random.Range (0, Spawnpoint1.Length);
				GameObject point = Spawnpoint1[id];
				GameObject asteroid = asteroids [Random.Range (0, asteroids.Count)];
				GameObject asteroidInstance = Instantiate<GameObject> (asteroid, point.transform.position, Quaternion.identity);

				Vector2 directionVector = new Vector2 (Random.Range (-1.0f, 1.0f), Random.Range (-1.0f, 1.0f));
				directionVector.Normalize ();
				asteroidInstance.GetComponent<Asteroid> ().direction = directionVector;

				activeEnemies.Add (asteroidInstance);
			}
			Debug.Log (Spawnpoint1);
		}
		if (lives < 0) {
			DoGameOver ();
		}
	}

	void DoGameOver()
	{
		Application.Quit ();

	}

	public void RemoveEnemies()
	{
		removingEnemies = true;
		for (int i = 0; i < activeEnemies.Count; i++) 
		{
			Destroy (activeEnemies [i]);
		}
		activeEnemies.Clear ();
		removingEnemies = false;
	}





}

